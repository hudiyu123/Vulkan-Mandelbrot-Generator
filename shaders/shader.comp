#version 450

layout (local_size_x_id = 0, local_size_y_id = 1) in;

layout (std140, binding = 0) buffer buf {
  vec4 image[];
};

layout (binding = 1) uniform UBO {
  int width;
  int height;
} ubo;

void main() {
  if (gl_GlobalInvocationID.x >= ubo.width || gl_GlobalInvocationID.y >= ubo.height) { return; }

  float x = float(gl_GlobalInvocationID.x) / float(ubo.width);
  float y = float(gl_GlobalInvocationID.y) / float(ubo.height);

  const vec2 uv = vec2(x, y - 0.5) * vec2(1.0, float(ubo.height) / float(ubo.width));
  const vec2 c = uv * 3 + vec2(-2.1, 0.0);
  vec2 z = vec2(0.0);
  const int m = 128;
  int n = 0;
  for (int i = 0; i < m; ++i) {
    z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;
    if (dot(z, z) > 4) { break; }
    ++n;
  }

  float t = float(n) / float(m);
  vec3 d = vec3(0.3, 0.3, 0.5);
  vec3 e = vec3(-0.2, -0.3, -0.5);
  vec3 f = vec3(2.1, 2.0, 3.0);
  vec3 g = vec3(0.0, 0.1, 0.0);
  vec4 color = vec4(d + e * cos(6.28318 * (f * t + g)), 1.0);

  image[ubo.width * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x] = color;
}
